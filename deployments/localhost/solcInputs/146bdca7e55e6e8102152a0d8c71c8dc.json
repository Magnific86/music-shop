{
  "language": "Solidity",
  "sources": {
    "contracts/MusicShop.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.1;\r\n\r\ncontract MusicShop {\r\n    address public owner;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only owner!\");\r\n        _;\r\n    }\r\n\r\n    event AlbumBought(\r\n        string indexed albumUuid,\r\n        string rawUuid,\r\n        address indexed buyer,\r\n        uint indexed time,\r\n        uint quantity\r\n    );\r\n\r\n    event OrderDelivered(\r\n        string indexed albumUuid,\r\n        address indexed customer,\r\n        uint timeDelivered\r\n    );\r\n\r\n    struct Album {\r\n        uint index;\r\n        string uuid;\r\n        string title;\r\n        uint price;\r\n        uint quantity;\r\n    }\r\n\r\n    struct Order {\r\n        uint orderId;\r\n        string albumUuid;\r\n        address customer;\r\n        uint orderedAt;\r\n        OrderStatus status;\r\n        uint quantity;\r\n    }\r\n\r\n    enum OrderStatus {\r\n        Paid,\r\n        Delivered\r\n    }\r\n\r\n    Album[] public albums;\r\n    Order[] public orders;\r\n\r\n    uint public currentIndex;\r\n    uint public currentOrderId;\r\n\r\n    function addAlbum(\r\n        string calldata _uuid,\r\n        string calldata _title,\r\n        uint _price,\r\n        uint _quantity\r\n    ) external onlyOwner {\r\n        albums.push(\r\n            Album({\r\n                index: currentIndex,\r\n                uuid: _uuid,\r\n                title: _title,\r\n                price: _price,\r\n                quantity: _quantity\r\n            })\r\n        );\r\n        ++currentIndex;\r\n    }\r\n\r\n    function allAlbums() external view returns (Album[] memory) {\r\n        Album[] memory albumList = new Album[](albums.length);\r\n\r\n        for (uint i = 0; i < albums.length; i++) {\r\n            albumList[i] = albums[i];\r\n        }\r\n\r\n        return albumList;\r\n    }\r\n\r\n    function buy(uint _index, uint _quantity) public payable {\r\n        Album storage albumToBuy = albums[_index];\r\n        require(msg.value == albumToBuy.price * _quantity, \"Invalid price!\");\r\n        require(albumToBuy.quantity >= _quantity, \"Out of stock!\");\r\n        albumToBuy.quantity -= _quantity;\r\n\r\n        orders.push(\r\n            Order({\r\n                albumUuid: albumToBuy.uuid,\r\n                customer: msg.sender,\r\n                orderedAt: block.timestamp,\r\n                status: OrderStatus.Paid,\r\n                quantity: _quantity,\r\n                orderId: currentOrderId\r\n            })\r\n        );\r\n\r\n        currentOrderId++;\r\n\r\n        emit AlbumBought(\r\n            albumToBuy.uuid,\r\n            albumToBuy.uuid,\r\n            msg.sender,\r\n            block.timestamp,\r\n            _quantity\r\n        );\r\n    }\r\n\r\n    function delivery(uint _index) external onlyOwner {\r\n        Order storage currOrder = orders[_index];\r\n\r\n        require(\r\n            currOrder.status != OrderStatus.Delivered,\r\n            \"Already delivered!\"\r\n        );\r\n\r\n        currOrder.status = OrderStatus.Delivered;\r\n\r\n        emit OrderDelivered(\r\n            currOrder.albumUuid,\r\n            currOrder.customer,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function withDraw(uint _amount, address _to) external onlyOwner {\r\n        require(_amount <= address(this).balance, \"Not enough funds!\");\r\n        payable(_to).transfer(_amount);\r\n    }\r\n\r\n    function fund() external payable onlyOwner {}\r\n\r\n    receive() external payable {\r\n        revert(\"Pls, use buy func to choose album!\");\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}