/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace MusicShop {
  export type AlbumStruct = {
    index: PromiseOrValue<BigNumberish>;
    uuid: PromiseOrValue<string>;
    title: PromiseOrValue<string>;
    price: PromiseOrValue<BigNumberish>;
    quantity: PromiseOrValue<BigNumberish>;
  };

  export type AlbumStructOutput = [
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber
  ] & {
    index: BigNumber;
    uuid: string;
    title: string;
    price: BigNumber;
    quantity: BigNumber;
  };
}

export interface MusicShopInterface extends utils.Interface {
  functions: {
    "addAlbum(string,string,uint256,uint256)": FunctionFragment;
    "albums(uint256)": FunctionFragment;
    "allAlbums()": FunctionFragment;
    "buy(uint256,uint256)": FunctionFragment;
    "currentIndex()": FunctionFragment;
    "currentOrderId()": FunctionFragment;
    "delivery(uint256)": FunctionFragment;
    "fund()": FunctionFragment;
    "orders(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "withDraw(uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addAlbum"
      | "albums"
      | "allAlbums"
      | "buy"
      | "currentIndex"
      | "currentOrderId"
      | "delivery"
      | "fund"
      | "orders"
      | "owner"
      | "withDraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addAlbum",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "albums",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "allAlbums", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "buy",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "currentIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentOrderId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "delivery",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "fund", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "orders",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withDraw",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "addAlbum", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "albums", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allAlbums", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentOrderId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delivery", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fund", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "orders", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withDraw", data: BytesLike): Result;

  events: {
    "AlbumBought(string,string,address,uint256,uint256)": EventFragment;
    "OrderDelivered(string,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AlbumBought"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderDelivered"): EventFragment;
}

export interface AlbumBoughtEventObject {
  albumUuid: string;
  rawUuid: string;
  buyer: string;
  time: BigNumber;
  quantity: BigNumber;
}
export type AlbumBoughtEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  AlbumBoughtEventObject
>;

export type AlbumBoughtEventFilter = TypedEventFilter<AlbumBoughtEvent>;

export interface OrderDeliveredEventObject {
  albumUuid: string;
  customer: string;
  timeDelivered: BigNumber;
}
export type OrderDeliveredEvent = TypedEvent<
  [string, string, BigNumber],
  OrderDeliveredEventObject
>;

export type OrderDeliveredEventFilter = TypedEventFilter<OrderDeliveredEvent>;

export interface MusicShop extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MusicShopInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addAlbum(
      _uuid: PromiseOrValue<string>,
      _title: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      _quantity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    albums(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, BigNumber, BigNumber] & {
        index: BigNumber;
        uuid: string;
        title: string;
        price: BigNumber;
        quantity: BigNumber;
      }
    >;

    allAlbums(
      overrides?: CallOverrides
    ): Promise<[MusicShop.AlbumStructOutput[]]>;

    buy(
      _index: PromiseOrValue<BigNumberish>,
      _quantity: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    currentIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentOrderId(overrides?: CallOverrides): Promise<[BigNumber]>;

    delivery(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fund(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    orders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, BigNumber, number, BigNumber] & {
        orderId: BigNumber;
        albumUuid: string;
        customer: string;
        orderedAt: BigNumber;
        status: number;
        quantity: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    withDraw(
      _amount: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addAlbum(
    _uuid: PromiseOrValue<string>,
    _title: PromiseOrValue<string>,
    _price: PromiseOrValue<BigNumberish>,
    _quantity: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  albums(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, BigNumber, BigNumber] & {
      index: BigNumber;
      uuid: string;
      title: string;
      price: BigNumber;
      quantity: BigNumber;
    }
  >;

  allAlbums(overrides?: CallOverrides): Promise<MusicShop.AlbumStructOutput[]>;

  buy(
    _index: PromiseOrValue<BigNumberish>,
    _quantity: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  currentIndex(overrides?: CallOverrides): Promise<BigNumber>;

  currentOrderId(overrides?: CallOverrides): Promise<BigNumber>;

  delivery(
    _index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fund(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  orders(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, BigNumber, number, BigNumber] & {
      orderId: BigNumber;
      albumUuid: string;
      customer: string;
      orderedAt: BigNumber;
      status: number;
      quantity: BigNumber;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  withDraw(
    _amount: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addAlbum(
      _uuid: PromiseOrValue<string>,
      _title: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      _quantity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    albums(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, BigNumber, BigNumber] & {
        index: BigNumber;
        uuid: string;
        title: string;
        price: BigNumber;
        quantity: BigNumber;
      }
    >;

    allAlbums(
      overrides?: CallOverrides
    ): Promise<MusicShop.AlbumStructOutput[]>;

    buy(
      _index: PromiseOrValue<BigNumberish>,
      _quantity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    currentIndex(overrides?: CallOverrides): Promise<BigNumber>;

    currentOrderId(overrides?: CallOverrides): Promise<BigNumber>;

    delivery(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    fund(overrides?: CallOverrides): Promise<void>;

    orders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, BigNumber, number, BigNumber] & {
        orderId: BigNumber;
        albumUuid: string;
        customer: string;
        orderedAt: BigNumber;
        status: number;
        quantity: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    withDraw(
      _amount: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AlbumBought(string,string,address,uint256,uint256)"(
      albumUuid?: PromiseOrValue<string> | null,
      rawUuid?: null,
      buyer?: PromiseOrValue<string> | null,
      time?: PromiseOrValue<BigNumberish> | null,
      quantity?: null
    ): AlbumBoughtEventFilter;
    AlbumBought(
      albumUuid?: PromiseOrValue<string> | null,
      rawUuid?: null,
      buyer?: PromiseOrValue<string> | null,
      time?: PromiseOrValue<BigNumberish> | null,
      quantity?: null
    ): AlbumBoughtEventFilter;

    "OrderDelivered(string,address,uint256)"(
      albumUuid?: PromiseOrValue<string> | null,
      customer?: PromiseOrValue<string> | null,
      timeDelivered?: null
    ): OrderDeliveredEventFilter;
    OrderDelivered(
      albumUuid?: PromiseOrValue<string> | null,
      customer?: PromiseOrValue<string> | null,
      timeDelivered?: null
    ): OrderDeliveredEventFilter;
  };

  estimateGas: {
    addAlbum(
      _uuid: PromiseOrValue<string>,
      _title: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      _quantity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    albums(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allAlbums(overrides?: CallOverrides): Promise<BigNumber>;

    buy(
      _index: PromiseOrValue<BigNumberish>,
      _quantity: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    currentIndex(overrides?: CallOverrides): Promise<BigNumber>;

    currentOrderId(overrides?: CallOverrides): Promise<BigNumber>;

    delivery(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fund(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    orders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    withDraw(
      _amount: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAlbum(
      _uuid: PromiseOrValue<string>,
      _title: PromiseOrValue<string>,
      _price: PromiseOrValue<BigNumberish>,
      _quantity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    albums(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allAlbums(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buy(
      _index: PromiseOrValue<BigNumberish>,
      _quantity: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    currentIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentOrderId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delivery(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fund(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    orders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withDraw(
      _amount: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
